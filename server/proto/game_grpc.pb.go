// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: game.proto

package game

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Game_Register_FullMethodName    = "/game.Game/Register"
	Game_WaitForGame_FullMethodName = "/game.Game/WaitForGame"
	Game_VotePlayer_FullMethodName  = "/game.Game/VotePlayer"
	Game_StageResult_FullMethodName = "/game.Game/StageResult"
	Game_CurGameInfo_FullMethodName = "/game.Game/CurGameInfo"
)

// GameClient is the client API for Game service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	WaitForGame(ctx context.Context, in *GameSession, opts ...grpc.CallOption) (Game_WaitForGameClient, error)
	VotePlayer(ctx context.Context, in *PlayerVote, opts ...grpc.CallOption) (*Empty, error)
	StageResult(ctx context.Context, in *GameSession, opts ...grpc.CallOption) (*VotingResult, error)
	CurGameInfo(ctx context.Context, in *GameSession, opts ...grpc.CallOption) (*GameInfo, error)
}

type gameClient struct {
	cc grpc.ClientConnInterface
}

func NewGameClient(cc grpc.ClientConnInterface) GameClient {
	return &gameClient{cc}
}

func (c *gameClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, Game_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) WaitForGame(ctx context.Context, in *GameSession, opts ...grpc.CallOption) (Game_WaitForGameClient, error) {
	stream, err := c.cc.NewStream(ctx, &Game_ServiceDesc.Streams[0], Game_WaitForGame_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &gameWaitForGameClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Game_WaitForGameClient interface {
	Recv() (*Empty, error)
	grpc.ClientStream
}

type gameWaitForGameClient struct {
	grpc.ClientStream
}

func (x *gameWaitForGameClient) Recv() (*Empty, error) {
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gameClient) VotePlayer(ctx context.Context, in *PlayerVote, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Game_VotePlayer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) StageResult(ctx context.Context, in *GameSession, opts ...grpc.CallOption) (*VotingResult, error) {
	out := new(VotingResult)
	err := c.cc.Invoke(ctx, Game_StageResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) CurGameInfo(ctx context.Context, in *GameSession, opts ...grpc.CallOption) (*GameInfo, error) {
	out := new(GameInfo)
	err := c.cc.Invoke(ctx, Game_CurGameInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServer is the server API for Game service.
// All implementations must embed UnimplementedGameServer
// for forward compatibility
type GameServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	WaitForGame(*GameSession, Game_WaitForGameServer) error
	VotePlayer(context.Context, *PlayerVote) (*Empty, error)
	StageResult(context.Context, *GameSession) (*VotingResult, error)
	CurGameInfo(context.Context, *GameSession) (*GameInfo, error)
	mustEmbedUnimplementedGameServer()
}

// UnimplementedGameServer must be embedded to have forward compatible implementations.
type UnimplementedGameServer struct {
}

func (UnimplementedGameServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedGameServer) WaitForGame(*GameSession, Game_WaitForGameServer) error {
	return status.Errorf(codes.Unimplemented, "method WaitForGame not implemented")
}
func (UnimplementedGameServer) VotePlayer(context.Context, *PlayerVote) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VotePlayer not implemented")
}
func (UnimplementedGameServer) StageResult(context.Context, *GameSession) (*VotingResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StageResult not implemented")
}
func (UnimplementedGameServer) CurGameInfo(context.Context, *GameSession) (*GameInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurGameInfo not implemented")
}
func (UnimplementedGameServer) mustEmbedUnimplementedGameServer() {}

// UnsafeGameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServer will
// result in compilation errors.
type UnsafeGameServer interface {
	mustEmbedUnimplementedGameServer()
}

func RegisterGameServer(s grpc.ServiceRegistrar, srv GameServer) {
	s.RegisterService(&Game_ServiceDesc, srv)
}

func _Game_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Game_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_WaitForGame_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GameSession)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GameServer).WaitForGame(m, &gameWaitForGameServer{stream})
}

type Game_WaitForGameServer interface {
	Send(*Empty) error
	grpc.ServerStream
}

type gameWaitForGameServer struct {
	grpc.ServerStream
}

func (x *gameWaitForGameServer) Send(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func _Game_VotePlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).VotePlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Game_VotePlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).VotePlayer(ctx, req.(*PlayerVote))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_StageResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).StageResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Game_StageResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).StageResult(ctx, req.(*GameSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_CurGameInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).CurGameInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Game_CurGameInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).CurGameInfo(ctx, req.(*GameSession))
	}
	return interceptor(ctx, in, info, handler)
}

// Game_ServiceDesc is the grpc.ServiceDesc for Game service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Game_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game.Game",
	HandlerType: (*GameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Game_Register_Handler,
		},
		{
			MethodName: "VotePlayer",
			Handler:    _Game_VotePlayer_Handler,
		},
		{
			MethodName: "StageResult",
			Handler:    _Game_StageResult_Handler,
		},
		{
			MethodName: "CurGameInfo",
			Handler:    _Game_CurGameInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WaitForGame",
			Handler:       _Game_WaitForGame_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "game.proto",
}
